package com.github.GTNH2Mega.fromScripts

import gttweaker.mods.gregtech.machines.Brewery
import minetweaker.MineTweakerAPI
import minetweaker.api.data.IData
import minetweaker.api.formatting.IFormattedText
import minetweaker.api.item.IIngredient
import minetweaker.api.item.IngredientCondition
import minetweaker.api.liquid.ILiquidStack
import minetweaker.api.tooltip.IngredientTooltips
import minetweaker.expand.*
import minetweaker.mc1710.brackets.ItemBracketHandler
import minetweaker.mc1710.brackets.LiquidBracketHandler
import minetweaker.mc1710.brackets.OreBracketHandler
import java.util.*

class AdvancedBackpacks : Runnable {
    override fun run() {
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2))
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 1) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:machete", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 4) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:adventureHat", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 3) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackHose", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 5) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 6) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:copterPack", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 7) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 8) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 9) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:pistonBoots", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:adventureSuit", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:adventurePants", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:clockworkCrossbow", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:coalJetpack", 0) as IIngredient)
        MineTweakerAPI.recipes.remove(ItemBracketHandler.getItem("adventurebackpack:melonJuiceBottle", 0) as IIngredient)
        val iItemStack = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 0)
        val hashMap = HashMap<String, IData>()
        val hashMap2 = HashMap<String, IData>()
        hashMap2["type"] = ExpandByte.asData(0.toByte())
        hashMap["wearableData"] = ExpandAnyDict.asData(hashMap2)
        MineTweakerAPI.recipes.addShaped(iItemStack.withTag(ExpandAnyDict.asData(hashMap)), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("materialHardenedleather"), OreBracketHandler.getOre("plateAluminium"), OreBracketHandler.getOre("materialHardenedleather")), arrayOf(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2), OreBracketHandler.getOre("chestIron"), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2)), arrayOf(OreBracketHandler.getOre("materialHardenedleather"), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 1), OreBracketHandler.getOre("materialHardenedleather"))), null)
        val iItemStack2 = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 0)
        val hashMap3 = HashMap<String, IData>()
        val hashMap4 = HashMap<String, IData>()
        hashMap4["type"] = ExpandByte.asData(0.toByte())
        hashMap3["wearableData"] = ExpandAnyDict.asData(hashMap4)
        MineTweakerAPI.recipes.addShaped(iItemStack2.withTag(ExpandAnyDict.asData(hashMap3)), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("materialHardenedleather"), OreBracketHandler.getOre("plateAluminium"), OreBracketHandler.getOre("materialHardenedleather")), arrayOf(ItemBracketHandler.getItem("BuildCraft|Factory:tankBlock", 0), OreBracketHandler.getOre("chestIron"), ItemBracketHandler.getItem("BuildCraft|Factory:tankBlock", 0)), arrayOf(OreBracketHandler.getOre("materialHardenedleather"), ItemBracketHandler.getItem("sleepingbag:sleepingBag", 0), OreBracketHandler.getOre("materialHardenedleather"))), null)
        val iItemStack3 = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 2)
        val hashMap5 = HashMap<String, IData>()
        val hashMap6 = HashMap<String, IData>()
        hashMap6["type"] = ExpandByte.asData(2.toByte())
        hashMap5["wearableData"] = ExpandAnyDict.asData(hashMap6)
        val iItemStack4 = iItemStack3.withTag(ExpandAnyDict.asData(hashMap5))
        val arrarriIngredient: Array<Array<IIngredient?>?> = arrayOfNulls(3)
        arrarriIngredient[0] = arrayOf(OreBracketHandler.getOre("itemLeather"), ItemBracketHandler.getItem("IC2:itemNightvisionGoggles", 1), OreBracketHandler.getOre("itemLeather"))
        val arriIngredient = arrayOfNulls<IIngredient>(3)
        arriIngredient[0] = ItemBracketHandler.getItem("minecraft:potion", 8262)
        val iItemStack5 = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 0)
        val hashMap7 = HashMap<String, IData>()
        val hashMap8 = HashMap<String, IData>()
        hashMap8["type"] = ExpandByte.asData(0.toByte())
        hashMap7["wearableData"] = ExpandAnyDict.asData(hashMap8)
        arriIngredient[1] = IngredientCondition.onlyWithTag(iItemStack5 as IIngredient, ExpandAnyDict.asData(hashMap7) as IData)
        arriIngredient[2] = ItemBracketHandler.getItem("minecraft:potion", 8262)
        arrarriIngredient[1] = arriIngredient
        arrarriIngredient[2] = arrayOf(OreBracketHandler.getOre("blockWoolBlack"), OreBracketHandler.getOre("blockWoolBlack"), OreBracketHandler.getOre("blockWoolBlack"))
        MineTweakerAPI.recipes.addShaped(iItemStack4, arrarriIngredient, null)
        val iItemStack6 = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 11)
        val hashMap9 = HashMap<String, IData>()
        val hashMap10 = HashMap<String, IData>()
        hashMap10["type"] = ExpandByte.asData(11.toByte())
        hashMap9["wearableData"] = ExpandAnyDict.asData(hashMap10)
        val iItemStack7 = iItemStack6.withTag(ExpandAnyDict.asData(hashMap9))
        val arrarriIngredient2: Array<Array<IIngredient?>?> = arrayOfNulls(3)
        arrarriIngredient2[0] = arrayOf(OreBracketHandler.getOre("itemLeather"), ItemBracketHandler.getItem("minecraft:red_flower", 0), OreBracketHandler.getOre("itemLeather"))
        val arriIngredient2 = arrayOfNulls<IIngredient>(3)
        val iItemStack8 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap11 = HashMap<String, IData>()
        val arriData = arrayOfNulls<IData>(1)
        val hashMap12 = HashMap<String, IData>()
        hashMap12["lvl"] = ExpandShort.asNBT(4.toShort())
        hashMap12["id"] = ExpandShort.asNBT(2.toShort())
        arriData[0] = ExpandAnyDict.asData(hashMap12)
        hashMap11["StoredEnchantments"] = ExpandAnyArray.asData(arriData)
        arriIngredient2[0] = IngredientCondition.onlyWithTag(iItemStack8 as IIngredient, ExpandAnyDict.asData(hashMap11) as IData)
        val iItemStack9 = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 0)
        val hashMap13 = HashMap<String, IData>()
        val hashMap14 = HashMap<String, IData>()
        hashMap14["type"] = ExpandByte.asData(0.toByte())
        hashMap13["wearableData"] = ExpandAnyDict.asData(hashMap14)
        arriIngredient2[1] = IngredientCondition.onlyWithTag(iItemStack9 as IIngredient, ExpandAnyDict.asData(hashMap13) as IData)
        val iItemStack10 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap15 = HashMap<String, IData>()
        val arriData2 = arrayOfNulls<IData>(1)
        val hashMap16 = HashMap<String, IData>()
        hashMap16["lvl"] = ExpandShort.asNBT(4.toShort())
        hashMap16["id"] = ExpandShort.asNBT(2.toShort())
        arriData2[0] = ExpandAnyDict.asData(hashMap16)
        hashMap15["StoredEnchantments"] = ExpandAnyArray.asData(arriData2)
        arriIngredient2[2] = IngredientCondition.onlyWithTag(iItemStack10 as IIngredient, ExpandAnyDict.asData(hashMap15) as IData)
        arrarriIngredient2[1] = arriIngredient2
        arrarriIngredient2[2] = arrayOf(OreBracketHandler.getOre("plateIron"), ItemBracketHandler.getItem("IC2:itemArmorRubBoots", 0), OreBracketHandler.getOre("plateIron"))
        MineTweakerAPI.recipes.addShaped(iItemStack7, arrarriIngredient2, null)
        val iItemStack11 = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 62)
        val hashMap17 = HashMap<String, IData>()
        val hashMap18 = HashMap<String, IData>()
        hashMap18["type"] = ExpandByte.asData(62.toByte())
        hashMap17["wearableData"] = ExpandAnyDict.asData(hashMap18)
        val iItemStack12 = iItemStack11.withTag(ExpandAnyDict.asData(hashMap17))
        val arrarriIngredient3: Array<Array<IIngredient?>?> = arrayOfNulls(3)
        arrarriIngredient3[0] = arrayOf(OreBracketHandler.getOre("itemLeather"), ItemBracketHandler.getItem("GalacticraftCore:item.oxygenMask", 0), OreBracketHandler.getOre("itemLeather"))
        val arriIngredient3 = arrayOfNulls<IIngredient>(3)
        arriIngredient3[0] = ItemBracketHandler.getItem("minecraft:potion", 8269)
        val iItemStack13 = ItemBracketHandler.getItem("adventurebackpack:adventureBackpack", 0)
        val hashMap19 = HashMap<String, IData>()
        val hashMap20 = HashMap<String, IData>()
        hashMap20["type"] = ExpandByte.asData(0.toByte())
        hashMap19["wearableData"] = ExpandAnyDict.asData(hashMap20)
        arriIngredient3[1] = IngredientCondition.onlyWithTag(iItemStack13 as IIngredient, ExpandAnyDict.asData(hashMap19) as IData)
        arriIngredient3[2] = ItemBracketHandler.getItem("minecraft:potion", 8269)
        arrarriIngredient3[1] = arriIngredient3
        arrarriIngredient3[2] = arrayOf(OreBracketHandler.getOre("blockWoolBlue"), ItemBracketHandler.getItem("minecraft:dye", 0), OreBracketHandler.getOre("blockWoolBlue"))
        MineTweakerAPI.recipes.addShaped(iItemStack12, arrarriIngredient3, null)
        MineTweakerAPI.recipes.addShapeless(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2), arrayOf<IIngredient>(ItemBracketHandler.getItem("BuildCraft|Factory:tankBlock", 0)), null)
        MineTweakerAPI.recipes.addShapeless(ItemBracketHandler.getItem("BuildCraft|Factory:tankBlock", 0), arrayOf<IIngredient>(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2)), null)
        MineTweakerAPI.recipes.addShapeless(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 1), arrayOf<IIngredient>(ItemBracketHandler.getItem("sleepingbag:sleepingBag", 0)), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:machete", 0), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("screwAnyIron"), OreBracketHandler.getOre("craftingToolFile"), OreBracketHandler.getOre("plateAnyIron")), arrayOf<IIngredient>(OreBracketHandler.getOre("craftingToolScrewdriver"), OreBracketHandler.getOre("plateAnyIron"), OreBracketHandler.getOre("plateAnyIron")), arrayOf(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 4), OreBracketHandler.getOre("screwAnyIron"), OreBracketHandler.getOre("craftingToolHardHammer"))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 4), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("dyeYellow"), OreBracketHandler.getOre("screwAnyIron"), OreBracketHandler.getOre("dyeYellow")), arrayOf<IIngredient>(OreBracketHandler.getOre("dyeBlue"), OreBracketHandler.getOre("stickAnyIron"), OreBracketHandler.getOre("dyeBlue")), arrayOf<IIngredient>(OreBracketHandler.getOre("dyeRed"), OreBracketHandler.getOre("dyeBlack"), OreBracketHandler.getOre("dyeRed"))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:adventureHat", 0), arrayOf(arrayOf<IIngredient?>(null, OreBracketHandler.getOre("craftingToolScrewdriver"), null), arrayOf<IIngredient?>(ItemBracketHandler.getItem("Backpack:tannedLeather", 0), ItemBracketHandler.getItem("minecraft:leather_helmet", 0), ItemBracketHandler.getItem("Backpack:tannedLeather", 0)), arrayOf<IIngredient?>(null, OreBracketHandler.getOre("screwGold"), null)), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 3), arrayOf(arrayOf<IIngredient?>(OreBracketHandler.getOre("screwAnyIron"), OreBracketHandler.getOre("pipeTinyBronze"), OreBracketHandler.getOre("screwAnyIron")), arrayOf(OreBracketHandler.getOre("springSmallAnyIron"), ItemBracketHandler.getItem("minecraft:stone_button", 0), OreBracketHandler.getOre("springSmallAnyIron")), arrayOf<IIngredient?>(null, OreBracketHandler.getOre("craftingToolScrewdriver"), null)), null)
        val iItemStack14 = ItemBracketHandler.getItem("adventurebackpack:backpackHose", 0)
        val hashMap21 = HashMap<String, IData>()
        hashMap21["mode"] = ExpandInt.toData(-1)
        hashMap21["amount"] = ExpandInt.toData(0)
        hashMap21["fluid"] = ExpandString.asData("None")
        hashMap21["tank"] = ExpandInt.toData(-1)
        MineTweakerAPI.recipes.addShaped(iItemStack14.withTag(ExpandAnyDict.asData(hashMap21)), arrayOf(arrayOf(OreBracketHandler.getOre("plateAnyRubber"), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 3), OreBracketHandler.getOre("plateAnyRubber")), arrayOf<IIngredient>(OreBracketHandler.getOre("plateAnyRubber"), OreBracketHandler.getOre("dyeGreen"), OreBracketHandler.getOre("plateAnyRubber")), arrayOf<IIngredient>(OreBracketHandler.getOre("plateAnyRubber"), OreBracketHandler.getOre("dyeGreen"), OreBracketHandler.getOre("plateAnyRubber"))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 5), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("plateSteel"), OreBracketHandler.getOre("plateSteel"), OreBracketHandler.getOre("plateSteel")), arrayOf(ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32641), OreBracketHandler.getOre("pipeLargeSteel"), ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32641)), arrayOf(OreBracketHandler.getOre("plateSteel"), ItemBracketHandler.getItem("gregtech:gt.blockmachines", 1111), OreBracketHandler.getOre("plateSteel"))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 6), arrayOf(arrayOf(ItemBracketHandler.getItem("IC2:itemRecipePart", 12), OreBracketHandler.getOre("screwSteel"), ItemBracketHandler.getItem("IC2:itemRecipePart", 12)), arrayOf<IIngredient>(OreBracketHandler.getOre("screwSteel"), OreBracketHandler.getOre("gearSteel"), OreBracketHandler.getOre("screwSteel")), arrayOf(ItemBracketHandler.getItem("IC2:itemRecipePart", 12), OreBracketHandler.getOre("craftingToolScrewdriver"), ItemBracketHandler.getItem("IC2:itemRecipePart", 12))), null)
        val iItemStack15 = ItemBracketHandler.getItem("adventurebackpack:copterPack", 0)
        val hashMap22 = HashMap<String, IData>()
        val hashMap23 = HashMap<String, IData>()
        val hashMap24 = HashMap<String, IData>()
        hashMap24["Empty"] = ExpandString.asData("")
        hashMap23["fuelTank"] = ExpandAnyDict.asData(hashMap24)
        hashMap22["wearableData"] = ExpandAnyDict.asData(hashMap23)
        MineTweakerAPI.recipes.addShaped(iItemStack15.withTag(ExpandAnyDict.asData(hashMap22)), arrayOf(arrayOf(OreBracketHandler.getOre("screwDiamond"), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 6), OreBracketHandler.getOre("screwDiamond")), arrayOf(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2), ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32601), OreBracketHandler.getOre("pipeTinySteel")), arrayOf(OreBracketHandler.getOre("pipeTinySteel"), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 5), OreBracketHandler.getOre("pipeTinySteel"))) as Array<Array<IIngredient>>, null)
        val iItemStack16 = ItemBracketHandler.getItem("adventurebackpack:copterPack", 0)
        val hashMap25 = HashMap<String, IData>()
        val hashMap26 = HashMap<String, IData>()
        val hashMap27 = HashMap<String, IData>()
        hashMap27["Empty"] = ExpandString.asData("")
        hashMap26["fuelTank"] = ExpandAnyDict.asData(hashMap27)
        hashMap25["wearableData"] = ExpandAnyDict.asData(hashMap26)
        MineTweakerAPI.recipes.addShaped(iItemStack16.withTag(ExpandAnyDict.asData(hashMap25)), arrayOf(arrayOf(OreBracketHandler.getOre("screwDiamond"), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 6), OreBracketHandler.getOre("screwDiamond")), arrayOf(ItemBracketHandler.getItem("BuildCraft|Factory:tankBlock", 0), ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32601), OreBracketHandler.getOre("pipeTinySteel")), arrayOf(OreBracketHandler.getOre("pipeTinySteel"), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 5), OreBracketHandler.getOre("pipeTinySteel"))) as Array<Array<IIngredient>>, null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 7), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("plateAnyRubber"), OreBracketHandler.getOre("craftingToolWrench"), OreBracketHandler.getOre("plateAnyRubber")), arrayOf(OreBracketHandler.getOre("plateAnyRubber"), ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32610), OreBracketHandler.getOre("plateAnyRubber")), arrayOf<IIngredient>(OreBracketHandler.getOre("plateAnyRubber"), OreBracketHandler.getOre("plateAnyRubber"), OreBracketHandler.getOre("plateAnyRubber"))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 9), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("turbineBladeSteel"), OreBracketHandler.getOre("screwSteel"), OreBracketHandler.getOre("turbineBladeSteel")), arrayOf<IIngredient>(OreBracketHandler.getOre("screwSteel"), OreBracketHandler.getOre("gearGtSmallSteel"), OreBracketHandler.getOre("screwSteel")), arrayOf<IIngredient>(OreBracketHandler.getOre("turbineBladeSteel"), OreBracketHandler.getOre("craftingToolScrewdriver"), OreBracketHandler.getOre("turbineBladeSteel"))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:pistonBoots", 0), arrayOf(arrayOf(ItemBracketHandler.getItem("Backpack:tannedLeather", 0), OreBracketHandler.getOre("craftingToolScrewdriver"), ItemBracketHandler.getItem("Backpack:tannedLeather", 0)), arrayOf(OreBracketHandler.getOre("plateAnyRubber"), ItemBracketHandler.getItem("minecraft:leather_boots", 0), OreBracketHandler.getOre("plateAnyRubber")), arrayOf<IIngredient>(OreBracketHandler.getOre("craftingPiston"), OreBracketHandler.getOre("screwBronze"), OreBracketHandler.getOre("craftingPiston"))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:adventureSuit", 0), arrayOf(arrayOf(ItemBracketHandler.getItem("Backpack:tannedLeather", 0), OreBracketHandler.getOre("craftingToolScrewdriver"), ItemBracketHandler.getItem("Backpack:tannedLeather", 0)), arrayOf<IIngredient>(ItemBracketHandler.getItem("harvestcraft:wovencottonItem", 0), ItemBracketHandler.getItem("minecraft:leather_chestplate", 0), ItemBracketHandler.getItem("harvestcraft:wovencottonItem", 0)), arrayOf(ItemBracketHandler.getItem("Backpack:tannedLeather", 0), OreBracketHandler.getOre("screwBronze"), ItemBracketHandler.getItem("Backpack:tannedLeather", 0))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:adventurePants", 0), arrayOf(arrayOf(ItemBracketHandler.getItem("Backpack:tannedLeather", 0), OreBracketHandler.getOre("craftingToolScrewdriver"), ItemBracketHandler.getItem("Backpack:tannedLeather", 0)), arrayOf<IIngredient>(ItemBracketHandler.getItem("harvestcraft:wovencottonItem", 0), ItemBracketHandler.getItem("minecraft:leather_leggings", 0), ItemBracketHandler.getItem("harvestcraft:wovencottonItem", 0)), arrayOf(ItemBracketHandler.getItem("Backpack:tannedLeather", 0), OreBracketHandler.getOre("screwBronze"), ItemBracketHandler.getItem("Backpack:tannedLeather", 0))), null)
        MineTweakerAPI.recipes.addShaped(ItemBracketHandler.getItem("adventurebackpack:clockworkCrossbow", 0), arrayOf(arrayOf(OreBracketHandler.getOre("springSmallSteel"), ItemBracketHandler.getItem("minecraft:bow", 0), OreBracketHandler.getOre("springSmallSteel")), arrayOf<IIngredient>(OreBracketHandler.getOre("stickSteel"), OreBracketHandler.getOre("wireFineSteel"), OreBracketHandler.getOre("stickSteel")), arrayOf<IIngredient>(OreBracketHandler.getOre("screwSteel"), OreBracketHandler.getOre("craftingToolScrewdriver"), OreBracketHandler.getOre("screwSteel"))), null)
        val iItemStack17 = ItemBracketHandler.getItem("adventurebackpack:coalJetpack", 0)
        val hashMap28 = HashMap<String, IData>()
        val hashMap29 = HashMap<String, IData>()
        val hashMap30 = HashMap<String, IData>()
        hashMap30["Empty"] = ExpandString.asData("")
        hashMap29["waterTank"] = ExpandAnyDict.asData(hashMap30)
        hashMap28["wearableData"] = ExpandAnyDict.asData(hashMap29)
        MineTweakerAPI.recipes.addShaped(iItemStack17.withTag(ExpandAnyDict.asData(hashMap28)), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("plateAluminium"), OreBracketHandler.getOre("screwSteel"), OreBracketHandler.getOre("plateAluminium")), arrayOf<IIngredient>(ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2), ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32601), ItemBracketHandler.getItem("adventurebackpack:backpackComponent", 2)), arrayOf(OreBracketHandler.getOre("pipeTinySteel"), ItemBracketHandler.getItem("Railcraft:machine.beta", 5), OreBracketHandler.getOre("pipeTinySteel"))), null)
        val iItemStack18 = ItemBracketHandler.getItem("adventurebackpack:coalJetpack", 0)
        val hashMap31 = HashMap<String, IData>()
        val hashMap32 = HashMap<String, IData>()
        val hashMap33 = HashMap<String, IData>()
        hashMap33["Empty"] = ExpandString.asData("")
        hashMap32["waterTank"] = ExpandAnyDict.asData(hashMap33)
        hashMap31["wearableData"] = ExpandAnyDict.asData(hashMap32)
        MineTweakerAPI.recipes.addShaped(iItemStack18.withTag(ExpandAnyDict.asData(hashMap31)), arrayOf(arrayOf<IIngredient>(OreBracketHandler.getOre("plateAluminium"), OreBracketHandler.getOre("screwSteel"), OreBracketHandler.getOre("plateAluminium")), arrayOf<IIngredient>(ItemBracketHandler.getItem("BuildCraft|Factory:tankBlock", 0), ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32601), ItemBracketHandler.getItem("BuildCraft|Factory:tankBlock", 0)), arrayOf(OreBracketHandler.getOre("pipeTinySteel"), ItemBracketHandler.getItem("Railcraft:machine.beta", 5), OreBracketHandler.getOre("pipeTinySteel"))), null)
        Brewery.addRecipe(LiquidBracketHandler.getLiquid("melonjuice").withAmount(750) as ILiquidStack, ItemBracketHandler.getItem("minecraft:melon", 0) as IIngredient, LiquidBracketHandler.getLiquid("water").withAmount(750) as ILiquidStack, false)
        IngredientTooltips.addTooltip(ItemBracketHandler.getItem("Backpack:backpack", 32767) as IIngredient, MineTweakerAPI.format.red(ExpandString.asFormattedText("Idiots! Do not upgrade your backpack with important stuff inside - Dream 2017!")) as IFormattedText)
    }
}